{"version":3,"file":"create.js","sourceRoot":"","sources":["../../src/handlers/create.ts"],"names":[],"mappings":";;;;;;;;;AACA,2CAA4B;AAC5B,qCAA4C;AAG5C;;;;;GAKG;AACU,QAAA,MAAM,GAAG,CAAC,KAAsB,EAAE,OAAgB,EAAE,QAAiC,EAAE,EAAE;IAEpG,MAAM,SAAS,GAAS,IAAI,IAAI,EAAE,CAAC;IAEnC,8EAA8E;IAC9E,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IACnC,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAA;QAClC,QAAQ,CAAC,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC,CAAA;KAC7D;IAED,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;QACjC,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAA;QAClC,QAAQ,CAAC,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC,CAAA;QACtD,OAAM;KACP;IAED,6CAA6C;IAC7C,MAAM,QAAQ,GAAG,IAAI,kBAAQ,CAAC,cAAc,EAAE,CAAA;IAE9C,MAAM,MAAM,GAAG;QACb,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;QACrC,IAAI,EAAE;YACJ,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;YACb,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,KAAK;YACd,SAAS,EAAE,SAAS,CAAC,YAAY,EAAE;YACnC,SAAS,EAAE,SAAS,CAAC,YAAY,EAAE;SACpC;KACF,CAAA;IAED,gCAAgC;IAChC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,KAAe,EAAE,MAAqB,EAAE,EAAE;QAC9D,0BAA0B;QAC1B,IAAI,KAAK,EAAE;YACT,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YACpB,QAAQ,CAAC,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC,CAAA;YACtD,OAAM;SACP;QAED,0BAA0B;QAC1B,MAAM,QAAQ,GAAG;YACf,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;SAC3C,CAAA;QACD,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;IAC1B,CAAC,CAAC,CAAA;AAEJ,CAAC,CAAC","sourcesContent":["import { Context, APIGatewayEvent, APIGatewayProxyCallback } from 'aws-lambda';\nimport * as uuid from 'uuid'\nimport { DynamoDB, AWSError } from 'aws-sdk'\nimport { PutItemOutput } from 'aws-sdk/clients/dynamodb';\n\n/**\n * \n * @param event \n * @param context \n * @param callback \n */\nexport const create = (event: APIGatewayEvent, context: Context, callback: APIGatewayProxyCallback) => {\n\n  const timestamp: Date = new Date();\n\n  // We require that as valid payload is sent in the intial request to the lamda\n  const data = JSON.parse(event.body)\n  if (!data) {\n    console.error('Validation Failed')\n    callback(new Error('The provided body payload is invalid.'))\n  }\n\n  if (typeof data.text !== 'string') {\n    console.error('Validation Failed')\n    callback(new Error('Couldn\\'t create the todo item.'))\n    return\n  }\n\n  // Create a connection to the document client\n  const dynamoDb = new DynamoDB.DocumentClient()\n\n  const params = {\n    TableName: process.env.DYNAMODB_TABLE,\n    Item: {\n      id: uuid.v1(),\n      text: data.text,\n      checked: false,\n      createdAt: timestamp.toDateString(),\n      updatedAt: timestamp.toDateString()\n    }\n  }\n\n  // Push our output into dynamoDB\n  dynamoDb.put(params, (error: AWSError, result: PutItemOutput) => {\n    // handle potential errors\n    if (error) {\n      console.error(error)\n      callback(new Error('Couldn\\'t create the todo item.'))\n      return\n    }\n\n    // Craft a reponse payload\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify(result, undefined, 2)\n    }\n    callback(null, response)\n  })\n\n};\n"]}