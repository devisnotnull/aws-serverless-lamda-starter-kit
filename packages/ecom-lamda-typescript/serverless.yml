service: sls-typescript-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"
plugins:  
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-scheduler

custom:
  ## Run serverless locally
  serverless-offline:
    port: 3001

  ## Common configuration
  defaultRegion: eu-west-1
  region: ${opt:region, self:custom.defaultRegion}
  environment: ${opt:stage, 'sandbox'}

  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}

  ## Handler configuration
  handlerLocation: "dist/handlers"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1

  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

  Outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.currentStage}


functions:

  create:
    handler: ${self:custom.handlerLocation}/create.create
    events:
      - http:
          path: entity
          method: post
          cors: true

  getAll:
    handler: ${self:custom.handlerLocation}/get.getAll
    events:
      - http:
          path: entity
          method: get
          cors: true

  getById:
    handler: ${self:custom.handlerLocation}/get.get
    events:
      - http:
          path: entity/{id}
          method: get
          cors: true
          request: 
            parameters: 
              paths: 
                id: true

  registeredOnly:
    handler: handler.hiUsers
    events:
      - http:
          path: /hiUsers
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: 'http://localhost:3000'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  guests:
    handler: handler.hiGuests
    events:
      - http:
          path: /hiAll
          method: get
