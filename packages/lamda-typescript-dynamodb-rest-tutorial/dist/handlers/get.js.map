{"version":3,"file":"get.js","sourceRoot":"","sources":["../../src/handlers/get.ts"],"names":[],"mappings":";;AACA,qCAA4C;AAG5C;;;;;GAKG;AACU,QAAA,OAAO,GAAG,CAAC,KAAsB,EAAE,OAAgB,EAAE,QAAiC,EAAE,EAAE;IAErG,MAAM,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC,cAAc,CAAC;IAEpC,6CAA6C;IAC7C,MAAM,QAAQ,GAAG,IAAI,kBAAQ,CAAC,cAAc,EAAE,CAAA;IAE9C,MAAM,MAAM,GAAG;QACb,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;QACrC,GAAG,EAAE;YACH,EAAE,EAAE,EAAE;SACP;KACF,CAAA;IAED,gCAAgC;IAChC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,KAAe,EAAE,MAAqB,EAAE,EAAE;QAC9D,0BAA0B;QAC1B,IAAI,KAAK,EAAE;YACT,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YACpB,QAAQ,CAAC,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC,CAAA;YACtD,OAAM;SACP;QAED,0BAA0B;QAC1B,MAAM,QAAQ,GAAG;YACf,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;SAC3C,CAAA;QACD,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;IAC1B,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC;AAEF;;;;;GAKG;AACU,QAAA,MAAM,GAAG,CAAC,KAAsB,EAAE,OAAgB,EAAE,QAAiC,EAAE,EAAE;IAEpG,6CAA6C;IAC7C,MAAM,QAAQ,GAAG,IAAI,kBAAQ,CAAC,cAAc,EAAE,CAAA;IAE9C,IAAI,MAAM,GAAG;QACX,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;QACrC,MAAM,EAAE,gBAAgB;KACzB,CAAC;IAEF,gCAAgC;IAChC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAe,EAAE,MAAkB,EAAE,EAAE;QAC5D,0BAA0B;QAC1B,IAAI,KAAK,EAAE;YACT,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YACpB,QAAQ,CAAC,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC,CAAA;YACtD,OAAM;SACP;QAED,0BAA0B;QAC1B,MAAM,QAAQ,GAAG;YACf,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;SAC3C,CAAA;QACD,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;IAC1B,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC","sourcesContent":["import { Context, APIGatewayEvent, APIGatewayProxyCallback } from 'aws-lambda';\nimport { DynamoDB, AWSError } from 'aws-sdk'\nimport { PutItemOutput, ScanOutput } from 'aws-sdk/clients/dynamodb';\n\n/**\n * \n * @param event \n * @param context \n * @param callback \n */\nexport const getById = (event: APIGatewayEvent, context: Context, callback: APIGatewayProxyCallback) => {\n\n  const { id } = event.pathParameters;\n  \n  // Create a connection to the document client\n  const dynamoDb = new DynamoDB.DocumentClient()\n\n  const params = {\n    TableName: process.env.DYNAMODB_TABLE,\n    Key: {\n      id: id\n    }\n  }\n\n  // Push our output into dynamoDB\n  dynamoDb.get(params, (error: AWSError, result: PutItemOutput) => {\n    // handle potential errors\n    if (error) {\n      console.error(error)\n      callback(new Error('Couldn\\'t create the todo item.'))\n      return\n    }\n\n    // Craft a reponse payload\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify(result, undefined, 2)\n    }\n    callback(null, response)\n  })\n};\n\n/**\n * \n * @param event \n * @param context \n * @param callback \n */\nexport const getAll = (event: APIGatewayEvent, context: Context, callback: APIGatewayProxyCallback) => {\n  \n  // Create a connection to the document client\n  const dynamoDb = new DynamoDB.DocumentClient()\n\n  var params = {\n    TableName: process.env.DYNAMODB_TABLE, // give it your table name \n    Select: \"ALL_ATTRIBUTES\"\n  };\n\n  // Push our output into dynamoDB\n  dynamoDb.scan(params, (error: AWSError, result: ScanOutput) => {\n    // handle potential errors\n    if (error) {\n      console.error(error)\n      callback(new Error('Couldn\\'t create the todo item.'))\n      return\n    }\n\n    // Craft a reponse payload\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify(result, undefined, 2)\n    }\n    callback(null, response)\n  })\n};\n"]}