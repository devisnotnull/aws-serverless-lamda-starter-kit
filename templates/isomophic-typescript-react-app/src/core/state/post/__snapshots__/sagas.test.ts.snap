// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`post saga: fetchAll saga: snapshot: fetchAllSaga with no page and limit params 1`] = `
Object {
  "call": Array [
    Object {
      "@@redux-saga/IO": true,
      "combinator": false,
      "payload": Object {
        "args": Array [
          "
    query($options: PageQueryOptions!) {
        posts(options: $options) {
            data {
                id
                title
            }
            meta {
                totalCount
            }
        }
    }
",
          Object {
            "options": Object {
              "paginate": Object {
                "limit": 40,
                "page": 1,
              },
            },
          },
        ],
        "context": null,
        "fn": "@@redux-saga-test-plan/json/function/fetch",
      },
      "type": "CALL",
    },
    Object {
      "@@redux-saga/IO": true,
      "combinator": false,
      "payload": Object {
        "args": Array [
          Object {
            "next": "@@redux-saga-test-plan/json/function/<anonymous>",
            "return": "@@redux-saga-test-plan/json/function/<anonymous>",
            "throw": "@@redux-saga-test-plan/json/function/<anonymous>",
          },
          "@@redux-saga-test-plan/json/function/refineYieldedValue",
        ],
        "context": null,
        "fn": "@@redux-saga-test-plan/json/function/sagaWrapper",
      },
      "type": "CALL",
    },
  ],
  "getContext": Array [
    Object {
      "@@redux-saga/IO": true,
      "combinator": false,
      "payload": "client",
      "type": "GET_CONTEXT",
    },
  ],
}
`;

exports[`post saga: fetchAllStart saga: snapshot: fetchAllSaga with no page and limit params 1`] = `
Object {
  "call": Array [
    Object {
      "@@redux-saga/IO": true,
      "combinator": false,
      "payload": Object {
        "args": Array [
          "
    query($options: PageQueryOptions!) {
        posts(options: $options) {
            data {
                id
                title
            }
            meta {
                totalCount
            }
        }
    }
",
          Object {
            "options": Object {
              "paginate": Object {
                "limit": 40,
                "page": 1,
              },
            },
          },
        ],
        "context": null,
        "fn": "@@redux-saga-test-plan/json/function/fetch",
      },
      "type": "CALL",
    },
    Object {
      "@@redux-saga/IO": true,
      "combinator": false,
      "payload": Object {
        "args": Array [
          Object {
            "next": "@@redux-saga-test-plan/json/function/<anonymous>",
            "return": "@@redux-saga-test-plan/json/function/<anonymous>",
            "throw": "@@redux-saga-test-plan/json/function/<anonymous>",
          },
          "@@redux-saga-test-plan/json/function/refineYieldedValue",
        ],
        "context": null,
        "fn": "@@redux-saga-test-plan/json/function/sagaWrapper",
      },
      "type": "CALL",
    },
  ],
  "getContext": Array [
    Object {
      "@@redux-saga/IO": true,
      "combinator": false,
      "payload": "client",
      "type": "GET_CONTEXT",
    },
  ],
}
`;

exports[`post saga: fetchByIdStart saga: snapshot: fetchAllSaga with no page and limit params 1`] = `
Object {
  "call": Array [
    Object {
      "@@redux-saga/IO": true,
      "combinator": false,
      "payload": Object {
        "args": Array [
          "
    query($options: PageQueryOptions!) {
        posts(options: $options) {
            data {
                id
                title
            }
            meta {
                totalCount
            }
        }
    }
",
          Object {
            "options": Object {
              "paginate": Object {
                "limit": 40,
                "page": 1,
              },
            },
          },
        ],
        "context": null,
        "fn": "@@redux-saga-test-plan/json/function/fetch",
      },
      "type": "CALL",
    },
    Object {
      "@@redux-saga/IO": true,
      "combinator": false,
      "payload": Object {
        "args": Array [
          Object {
            "next": "@@redux-saga-test-plan/json/function/<anonymous>",
            "return": "@@redux-saga-test-plan/json/function/<anonymous>",
            "throw": "@@redux-saga-test-plan/json/function/<anonymous>",
          },
          "@@redux-saga-test-plan/json/function/refineYieldedValue",
        ],
        "context": null,
        "fn": "@@redux-saga-test-plan/json/function/sagaWrapper",
      },
      "type": "CALL",
    },
  ],
  "getContext": Array [
    Object {
      "@@redux-saga/IO": true,
      "combinator": false,
      "payload": "client",
      "type": "GET_CONTEXT",
    },
  ],
}
`;
